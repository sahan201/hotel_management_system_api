spring.application.name=hotel-api

server.port=8080

# jdbc => java database connection
spring.datasource.url=jdbc:mysql://localhost:3306/hms?createDatabaseIfNotExists=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC

#credentials
spring.datasource.username=root
spring.datasource.password=2001@sahan

#and then tells the spring which driver class to use to connect
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#controls hibernate
spring.jpa.hibernate.ddl-auto=update

#print sql queries for debugging
spring.jpa.show-sql=true

#tells hibernate which sql dialect to use
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect



#   First part = app setup (name, port)
#   Middle part = database connection (where, username, password, driver)
#   Last part = how Hibernate works with DB (schema updates, logging, SQL style)

#   JPA, or Java Persistence API, is a specification
#   within the Java ecosystem for managing relational data
#   in Java applications using object-oriented principles.
#   It is not a framework itself but a set of interfaces and
#   guidelines that require an implementation, such as Hibernate
#   or EclipseLink.

#   A SQL dialect is a specific variation or
#   implementation of the Structured Query Language (SQL)
#   tailored to a particular database management system (DBMS)